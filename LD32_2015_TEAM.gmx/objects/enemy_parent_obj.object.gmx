<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>enemy_mask_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//chooses type
type = choose(ENMTYPE_OWL, ENMTYPE_CROW, ENMTYPE_ROBIN, ENMTYPE_PIDGEON, ENMTYPE_VULTURE, ENMTYPE_AIRHORN);

enmTable = enemy_data(type);

max_health = enmTable[? ENM_HEALTH];
current_health = max_health;
healtick = 0;

handle_length = random_range(0, array_length_1d(global.sick_handles));
first_length = random_range(0, array_length_1d(global.first_names));
last_length = random_range(0, array_length_1d(global.last_names));

name_determine = random_range(0,4);

if(name_determine &lt;= 3)
{
    enemy_name = global.first_names[first_length] + " " + global.last_names[last_length]; 
}

else
{
    enemy_name = global.sick_handles[handle_length];
}

player_obj.enemies_alive++;

armor = enmTable[? ENM_ARMOR];

_weapon = NULL;

weapon = choose(WEP_NUKE,WEP_SHOTGUN, WEP_SINGLESHOT, WEP_ROCKET, WEP_MELEE, WEP_MACHINEGUN );

weapon_aim = 0;
weapon_x = x;
weapon_y = y;
weapon_scale = 1;
fireTimer = 60;

path = path_add();


walkSpd = 1;
runSpd = enmTable[? ENM_SPEED];

physics_move_init();

dx = 0;
dy = 0;

killer = NULL;
killer_weapon = NULL;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>killcount</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.death_count++;

player_obj.lose_meter += 1;
player_obj.enemies_alive--;

for (i = 1; i &lt; array_length_1d(global.deaths); i++)
{
    global.deaths[i - 1] = global.deaths[i];
}

var i = array_length_1d(global.deaths);

i--;

if(killer == NULL)
{
    if(killer_weapon == WEP_ROCKET)
    {
        global.deaths[i] = id.enemy_name + " exploded.";
    }
    else
    {
        global.deaths[i] = id.enemy_name + " died.";
    }
}
else if(killer_weapon == WEP_MACHINEGUN)
{
    global.deaths[i] = killer.enemy_name + "killed " + id.enemy_name + " with a machine gun.";
}
else if(killer_weapon == WEP_MELEE)
{
    global.deaths[i] = killer.enemy_name + "killed " + id.enemy_name + " with a knife -- humiliation!";
}
else if(killer_weapon == WEP_NUKE)
{
    global.deaths[i] = killer.enemy_name + "killed " + id.enemy_name + " with a bomb.";
}
else if(killer_weapon == WEP_ROCKET)
{
    global.deaths[i] = killer.enemy_name + "killed " + id.enemy_name + " with a rocket.";
}
else if(killer_weapon == WEP_SHOTGUN)
{
    global.deaths[i] = killer.enemy_name + "killed " + id.enemy_name + " with a shotgun.";
}
else if(killer_weapon == WEP_SINGLESHOT)
{
    global.deaths[i] = killer.enemy_name + "killed " + id.enemy_name + " with a pistol.";
}
else
{
    global.deaths[i] = killer.enemy_name + "killed " + id.enemy_name + ".";
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player_obj)
{
    weapon_aim = point_direction(x, y, player_obj.x, player_obj.y);
}

weapon_x = x+lengthdir_x(25, weapon_aim);
weapon_y = y+lengthdir_y(25, weapon_aim);

if(weapon_aim &gt; 90 &amp;&amp; weapon_aim &lt;=270)
{
    weapon_scale = -1;
}
else
{
    weapon_scale = 1;
}

var wepData = weapon_data(weapon);

if wepData != NULL
{
    switch wepData[? WEPTAG_TYPE ]
    {
        case WEPTYPE_PROJECTILE:
            if fireTimer &lt;= 0
            {
                if object_exists(wepData[? WEPTAG_PROJECTILE ])
                {
                    var o = instance_create(weapon_x,weapon_y,wepData[? WEPTAG_PROJECTILE ]);
                    
                    with o
                    {
                        direction = other.weapon_aim;
                        creator =  other.id;
                    }
                }
                
                fireTimer = room_speed*wepData[? WEPTAG_FIRE_RATE ];
            }
            else
            {
                fireTimer -= 1;
            }
        break;
        
        case WEPTYPE_MELEE:
            if instance_exists(player_obj)
            {
                var dist = distance_to_object(player_obj);
                if (fireTimer &lt;= 0 and (dist &lt;= (wepData[? WEPTAG_RANGE ] * 50)))  
                {

                    var o = instance_create(weapon_x,weapon_y,wepData[? WEPTAG_PROJECTILE ]);    
                    
                    with o
                        {
                            direction = other.weapon_aim;
                            creator = other.id;
                        }
                    fireTimer = room_speed*wepData[? WEPTAG_FIRE_RATE ];
                }else
                    fireTimer -= 1;
            }
                break;
            }
            
}

if(current_health == 0)
{
    global.death_count++;
}

//If we are colliding with another enemy, we need to move away from them.
if place_meeting(x,y,enemy_parent_obj)
{
    var obj = instance_place(x,y,enemy_parent_obj);
    var px,py,dir;
    if (obj.x != x) and (obj.y != y)
    {
        dir = point_direction(obj.x,obj.y,x,y);
    }
    else
    {
        dir = irandom(3)*90;
    }
    px = lengthdir_x(runSpd,dir);
    py = lengthdir_y(runSpd,dir);
    physics_move_collide(px,py,solid_obj,NULL);
}
else if instance_exists(player_obj)
{
    if point_distance(x,y,player_obj.x,player_obj.y) &gt; 64 or collision_line(x,y,player_obj.x,player_obj.y,solid_obj,true,true) != noone
    {
        path_clear_points(path);
        mp_grid_path(global.enemy_motion_grid, path, x, y, player_obj.x, player_obj.y, 1);
        path_set_precision(path,1);
        path_start(path, runSpd, 0, 1);
    }
    else
    {
        path_end();
    }
}

if(current_health &lt;= 0)
{
    instance_destroy();
    
}

//Old Healthbar
/*if(current_health &gt;=0)
{
    healthbar_id.image_xscale = current_health / max_health;
}
else
{
    healthbar_id.image_xscale = 0;
}

healthbar_id.x = x - 4;
healthbar_id.y = y - 20;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="projectile_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.creator == id)
{
    exit;
}

current_health = current_health + armor / 10 - 10;

if (current_health &gt; 0)
{
    exit;
}

id.killcount++; 

if(is_undefined(other))
{
    exit;
}

if(other == NULL)
{
    exit;
}

killer = other.creator;

if(is_undefined(other.creator))
{
    exit;
}

if(other.creator == NULL)
{
    exit;
}

killer_weapon = other.creator.weapon;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="explosion_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_health -= 10 - other.image_xscale;

if (current_health &gt; 0)
{
    exit;
}

killer = NULL;
killer_weapon = WEP_ROCKET;

id.killcount++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="heal_hitbox_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if((current_health &lt; max_health*2))
    {
        if(instance_exists(heal_hitbox_obj) and place_meeting(x,y,heal_hitbox_obj)){
        current_health += global.healValue;
        }
    }




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(ord("P"))
{
    draw_set_alpha(0.25);
    draw_path(path,0,0,true);
    draw_set_alpha(1);
}
draw_self();
var hpScale = current_health / max_health;
//Draw a basic health bar
var hpscale = current_health / max_health;
draw_set_color(c_maroon);
draw_rectangle(x-16,y-21,x+(16*hpscale),y-26,false);
draw_set_color(c_red);
draw_rectangle(x-16,y-21,x+(16*hpscale),y-26, true);

draw_set_color(c_white);
draw_set_halign(fa_center);
draw_text(x, y-40, enemy_name);
draw_set_halign(fa_left);


if type != NULL
{
    var enmData = enemy_data(type);
    var spr = enmData[? ENM_SPRITE];
    if sprite_exists(spr)
    {
        draw_sprite_ext(spr,0,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha);
    }
}
if weapon != NULL
{
    var wepData = weapon_data(weapon);
    var wepSpr = wepData[? WEPTAG_SPRITE];
    if sprite_exists(wepSpr)
    {
        draw_sprite_ext(wepSpr,0,weapon_x,weapon_y,1,weapon_scale,weapon_aim,c_white,1);
    }
}


//draw_sprite_ext(health_bar_spr,0,x-4,y-20,current_health / max_health,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
