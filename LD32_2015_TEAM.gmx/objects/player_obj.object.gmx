<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>front_player_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>player_mask_spr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.my_deaths = 0;
global.my_population = 0;
global.my_time = 0;

steps = 0;

dx = 0;
dy = 0;
maxRange = 200;
range = 0;

spd = 0;
walkingSpd = 4;

enemies_alive = 0;

lose_meter = 0;
lose_total = 50;
lose_decrement = 0.01;

beam_cooldown = 0;

physics_move_init();

xaxis = 0;
yaxis = 0;
magnitude = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.my_time = steps;

if(global.leaderboard_time &lt; steps)
{
    global.leaderboard_time = steps;
}

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.leaderboard_population &lt; enemies_alive)
{
    global.leaderboard_population = enemies_alive;
}

if(global.my_population &lt; enemies_alive)
{
    global.my_population = enemies_alive;
}

steps++;

var hor,ver, healbox;
keyboard_set_map(ord("W"), vk_up);
keyboard_set_map(ord("A"), vk_left);
keyboard_set_map(ord("S"), vk_down);
keyboard_set_map(ord("D"), vk_right);

hor = keyboard_check(vk_right)-keyboard_check(vk_left);
ver = keyboard_check(vk_down)-keyboard_check(vk_up);
mouse = mouse_check_button(mb_left);
mousermb = mouse_check_button(mb_right);

//beam cooldown update
if(beam_cooldown - 1 &lt; 0)
{
    beam_cooldown = 0;
}
else   
{
    beam_cooldown -= 1;

}
//losing meter handling
if( lose_meter - lose_decrement &lt; 0)
{
    lose_meter = 0;
}
else
{
    lose_meter -= lose_decrement;
}

if(lose_meter &gt;= lose_total)
{
    instance_destroy();
}

//Not losing meter handling
if hor != 0 or ver != 0
{
    spd = walkingSpd;
}

if hor == 1
{
image_xscale = 1; 
}
else if hor == -1
{
image_xscale = -1; 
}
else if ver == 1
{
image_yscale = -1;
}
else if ver == -1
{
image_yscale = 1;
}

else
{
    spd = lerp(spd,0,0.2);
}


image_angle = direction;
draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha);

physics_move_collide(hor*spd,ver*spd,solid_obj,enemy_parent_obj);

var dist = distance_to_point(mouse_x, mouse_y);

range = maxRange - dist;

if (mouse and range &gt; 0)
{
    if !instance_exists(heal_hitbox_obj)
    {
        healbox = instance_create(mouse_x, mouse_y, heal_hitbox_obj);
    }
}else{
    if instance_exists(heal_hitbox_obj)
    {
         with heal_hitbox_obj instance_destroy();
    }
}

//healybeam
if mousermb &amp;&amp; beam_cooldown == 0
{
    //point_beam_shoot(x, y, mouse_x, mouse_y);
}

if bbox_left &lt; 0 
{
    do {x+=1} until bbox_left=0;
}
if bbox_right &gt; room_width
{
    do {x-=1} until bbox_right=room_width;
}
if bbox_top &lt; 0 
{
    do {y+=1} until bbox_top=0;
}
if bbox_bottom &gt; room_height
{
    do {y-=1} until bbox_bottom=room_height;
}

gamepad_input(0);

move_axis(xaxis, yaxis, .25 ,4);


instance_deactivate_object(wall_obj);
instance_activate_region(x-2048,y-2048,x+2048,y+2048,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_top);

var time_seconds = steps / room_speed;
var time_minutes = floor(time_seconds / 60);

var time_display = "Time: ";

if(time_minutes &gt; 0)
{
    time_seconds -= time_minutes * 60;
    time_display += string(time_minutes) + ":";
    
    if(time_seconds &lt; 10)
    {
        time_display += "0";
    }
    
    time_display += string_format(time_seconds, 2, 2);
}
else
{
    time_display += string(time_seconds);
}

draw_set_color(c_white);

draw_text(32, 16, time_display);

draw_text(32, 32, "Deaths: " + string(global.my_deaths));
draw_text(32, 48, "Population: " + string(enemies_alive));

//Draw a basic bitch meter
var lose_scale = lose_meter / lose_total;

//Draw a basic health bar

draw_set_color(c_white);
draw_text(500, 16, "Remorse");

draw_set_color(c_gray);
draw_rectangle(500,32,500+(100*lose_scale),48,false);

draw_set_color(c_white);
draw_rectangle(500,32,600,48,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
