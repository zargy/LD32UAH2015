<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>front_player_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>player_mask_spr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dx = 0;
dy = 0;
maxRange = 200;
range = 0;

spd = 0;
walkingSpd = 4;

enemies_alive = 0;

lose_meter = 0;
lose_total = 50;
lose_decrement = 0.01;

physics_move_init();
globalvar death_count;

global.death_count = 0;

xaxis = 0;
yaxis = 0;
magnitude = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var timer = get_timer();

if(global.leaderboard_time &lt; timer)
{
    global.leaderboard_time = timer;
}

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.leaderboard_population &lt; enemies_alive)
{
    global.leaderboard_population = enemies_alive;
}

var hor,ver, healbox;

hor = keyboard_check(ord("D"))-keyboard_check(ord("A"));
ver = keyboard_check(ord("S"))-keyboard_check(ord("W"));
mouse = mouse_check_button(mb_left);

//losing meter handling
if( lose_meter - lose_decrement &lt; 0)
{
    lose_meter = 0;
}
else
{
    lose_meter -= lose_decrement;
}

if(lose_meter &gt;= lose_total)
{
    instance_destroy();
}

//Not losing meter handling
if hor != 0 or ver != 0
{
    spd = walkingSpd;
}

if hor == 1
{
sprite_index = side_player_spr;
image_xscale = 1; 
}
else if hor == -1
{
sprite_index = side_player_spr;
image_xscale = -1; 
}
else if ver == 1
{
sprite_index = front_player_spr;
}
else if ver == -1
{
sprite_index = Back_player_spr;
}

else
{
    spd = lerp(spd,0,0.2);
}

physics_move_collide(hor*spd,ver*spd,solid_obj,enemy_parent_obj);

var dist = distance_to_point(mouse_x, mouse_y);

range = maxRange - dist;

if (mouse and range &gt; 0)
{
    if !instance_exists(heal_hitbox_obj)
    {
        healbox = instance_create(mouse_x, mouse_y, heal_hitbox_obj);
    }
}else{
    if instance_exists(heal_hitbox_obj)
    {
         with heal_hitbox_obj instance_destroy();
    }
}

if bbox_left &lt; 0 
{
    do {x+=1} until bbox_left=0;
}
if bbox_right &gt; room_width
{
    do {x-=1} until bbox_right=room_width;
}
if bbox_top &lt; 0 
{
    do {y+=1} until bbox_top=0;
}
if bbox_bottom &gt; room_height
{
    do {y-=1} until bbox_bottom=room_height;
}

gamepad_input(0);

move_axis(xaxis, yaxis, .25 ,4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//death counter in upper-left of screen

global.time_elapsed = get_timer()/1000000;

time_seconds = global.time_elapsed % 60;
time_minutes = abs((global.time_elapsed / 60) - 0.5); //0.5 subtracted for rounding
time_hours = abs((global.time_elapsed / 3600) - 0.5); // 0.5 subtracted for rounding

seconds_string = string_format(time_seconds, 2, 2);
minutes_string = string_format(time_minutes, 2, 0);
hours_string = string_format(time_hours, 2, 0);

enemies_alive_string = string(enemies_alive);

time_display = "Time Elapsed: " + hours_string + ":" + minutes_string + ":" + seconds_string; 

draw_text(32, 16, time_display);
draw_text(32, 32, "Death Count: " + string(global.death_count));
draw_text(32, 48, "Enemies alive: " + enemies_alive_string);


//Draw a basic bitch meter
var lose_scale = lose_meter / lose_total;

//Draw a basic health bar

draw_set_color(c_white);
draw_rectangle(500,32,500+(100*lose_scale),48,false);
draw_set_color(c_silver);
draw_rectangle(500,32,600,48, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
