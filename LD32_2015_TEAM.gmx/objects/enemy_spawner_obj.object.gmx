<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spawner_mask_spr</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//alarm[0] = 300;

//measured in steps
melee_frequency = 1000;
single_frequency = 1200;
nuke_frequency = 2000;
rocket_frequency = 3000;
machine_frequency = 1000;
shotgun_frequency = 1800;
airhorn_frequency = 1337;
minigun_frequency = 4000;

spawner_tick = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(player_obj)
{
    exit;
}

if point_distance(x,y,player_obj.x,player_obj.y) &gt; 5000
{
    exit;
}

spawner_tick += 1;

//spawns melee unit after x ticks where x is melee frequency
if( melee_frequency &gt; 0 &amp;&amp; spawner_tick % melee_frequency == 0 )
{
    temp_enemy_id = instance_create(x, y, enemy_parent_obj);
    temp_enemy_id.type = ENMTYPE_PIDGEON;
    temp_enemy_id.weapon = WEP_MELEE;
}
//spawn for minigunners
if(spawner_tick % minigun_frequency == 0 &amp;&amp; minigun_frequency != 0)
{
    temp_enemy_id = instance_create(x, y, enemy_parent_obj);
    temp_enemy_id.type = ENMTYPE_VULTURE;
    temp_enemy_id.weapon = WEP_MINI;
}

//spawn for singles
if( single_frequency &gt; 0 &amp;&amp; spawner_tick % single_frequency == 0 )
{
    temp_enemy_id = instance_create(x, y, enemy_parent_obj);
    temp_enemy_id.type = ENMTYPE_CROW;
    temp_enemy_id.weapon = WEP_SINGLESHOT;
}

//spawn for nukes
if( nuke_frequency &gt; 0 &amp;&amp; spawner_tick % nuke_frequency == 0 )
{
    temp_enemy_id = instance_create(x, y, enemy_parent_obj);
    temp_enemy_id.type = ENMTYPE_OWL;
    temp_enemy_id.weapon = WEP_NUKE;
}

//Spawn for rockets
if( rocket_frequency &gt; 0 &amp;&amp; spawner_tick % rocket_frequency == 0 )
{
    temp_enemy_id = instance_create(x, y, enemy_parent_obj);
    temp_enemy_id.type = ENMTYPE_ROBIN;
    temp_enemy_id.weapon = WEP_ROCKET;
}

if( machine_frequency &gt; 0 &amp;&amp; spawner_tick % machine_frequency == 0 )
{
    temp_enemy_id = instance_create(x, y, enemy_parent_obj);
    temp_enemy_id.type = ENMTYPE_VULTURE;
    temp_enemy_id.weapon = WEP_MACHINEGUN;
}

if( shotgun_frequency &gt; 0 &amp;&amp; spawner_tick % shotgun_frequency == 0 )
{
    temp_enemy_id = instance_create(x, y, enemy_parent_obj);
    temp_enemy_id.type = ENMTYPE_CROW;
    temp_enemy_id.weapon = WEP_SHOTGUN;
}

if(spawner_tick % airhorn_frequency == 0 &amp;&amp; airhorn_frequency != 0)
{
    temp_enemy_id = instance_create(x, y, enemy_parent_obj);
    temp_enemy_id.type = ENMTYPE_AIRHORN;
    temp_enemy_id.weapon = WEP_AIRHORN;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
